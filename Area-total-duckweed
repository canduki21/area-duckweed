import cv2
import numpy as np
import matplotlib.pyplot as plt

# === Load the image ===
image = cv2.imread("area_try1/area_try_wRuler.png")  # Replace with your file name
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# === Step 1: Choose how to input points ===
choice = input("Do you want to (1) click on the image or (2) enter coordinates manually? (1/2): ")

points = []

# Option 1: Click on the image
if choice == '1':
    def click_event(event, x, y, flags, param):
        if event == cv2.EVENT_LBUTTONDOWN:
            points.append((x, y))
            print(f"Clicked at: ({x}, {y})")
            cv2.circle(image, (x, y), 5, (0, 0, 255), -1)
            cv2.imshow("Click on Ruler", image)

    cv2.imshow("Click on Ruler", image)
    cv2.setMouseCallback("Click on Ruler", click_event)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

elif choice == '2':
    x1, y1 = map(int, input("Enter coordinates for point 1 (x1, y1): ").split(','))
    x2, y2 = map(int, input("Enter coordinates for point 2 (x2, y2): ").split(','))
    points = [(x1, y1), (x2, y2)]
else:
    print("Invalid choice. Please restart the program and choose 1 or 2.")
    exit()

if len(points) != 2:
    print("You need to specify exactly two points.")
    exit()

# === Step 2: Calculate pixel distance ===
(x1, y1), (x2, y2) = points
pixel_distance = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)
print(f"Measured pixel distance: {pixel_distance:.2f} pixels")

# === Step 3: Input known distance ===
real_distance_cm = float(input("Enter the real-world distance between the two points (in cm): "))
pixels_per_cm = pixel_distance / real_distance_cm
pixel_area_cm2 = (1 / pixels_per_cm) ** 2

# === Step 4: Let user select multiple regions of interest (ROIs) ===
rois = []
num_rois = 9  # Number of ROIs to select

print(f"Select {num_rois} regions where the plant is. Press ENTER or SPACE to confirm each ROI.")

for i in range(num_rois):
    roi = cv2.selectROI(f"Select Plant Area {i + 1}", image, showCrosshair=True, fromCenter=False)
    cv2.destroyWindow(f"Select Plant Area {i + 1}")
    rois.append(roi)

# === Step 5: Segment green in the ROIs ===
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
lower_green = np.array([25, 40, 40])
upper_green = np.array([85, 255, 255])

kernel = np.ones((5, 5), np.uint8)

plant_areas_cm2 = []

for roi in rois:
    x, y, w, h = roi
    roi_img = image[y:y+h, x:x+w]

    # Segment the green areas in the current ROI
    roi_hsv = cv2.cvtColor(roi_img, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(roi_hsv, lower_green, upper_green)

    # Clean up the mask
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

    # Calculate the area of the plant in the ROI
    plant_pixels = cv2.countNonZero(mask)
    plant_area_cm2 = plant_pixels * pixel_area_cm2
    plant_areas_cm2.append(plant_area_cm2)

    # Show the result for each ROI
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.title(f"Selected ROI {rois.index(roi) + 1}")
    plt.imshow(cv2.cvtColor(roi_img, cv2.COLOR_BGR2RGB))
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.title(f"Detected Plant Area {rois.index(roi) + 1}")
    plt.imshow(mask, cmap="gray")
    plt.axis("off")

    plt.tight_layout()
    plt.show()

# === Step 6: Print results ===
for i, area in enumerate(plant_areas_cm2):
    print(f"Plant area in ROI {i + 1}: {area:.2f} cmÂ²")
